From 38411a11f32addbb79781cf518102714c1f3e3bb Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Sun, 10 Mar 2013 16:27:37 -0500
Subject: [PATCH 2/2] Add a Scoreboard API, adds BUKKIT-3776

---
 .../java/net/minecraft/server/MinecraftServer.java |    2 +
 .../net/minecraft/server/ScoreboardObjective.java  |   14 +++
 .../java/net/minecraft/server/ScoreboardTeam.java  |   14 +++
 .../net/minecraft/server/SecondaryWorldServer.java |    2 +-
 src/main/java/net/minecraft/server/World.java      |    4 +-
 .../java/net/minecraft/server/WorldServer.java     |    6 +-
 .../java/org/bukkit/craftbukkit/CraftServer.java   |    7 ++
 .../craftbukkit/scoreboard/CraftObjective.java     |   67 ++++++++++
 .../scoreboard/CraftObjectiveCriteria.java         |   25 ++++
 .../scoreboard/CraftObjectiveDisplay.java          |   23 ++++
 .../craftbukkit/scoreboard/CraftScoreboard.java    |  129 ++++++++++++++++++++
 .../bukkit/craftbukkit/scoreboard/CraftTeam.java   |   68 +++++++++++
 12 files changed, 355 insertions(+), 6 deletions(-)
 create mode 100644 src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
 create mode 100644 src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveCriteria.java
 create mode 100644 src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveDisplay.java
 create mode 100644 src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
 create mode 100644 src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java

diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 5c535cc..efc7c02 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -84,6 +84,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
     public final Thread primaryThread;
     public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
     public int autosavePeriod;
+    public Scoreboard scoreboard;
     // CraftBukkit end

     public MinecraftServer(OptionSet options) { // CraftBukkit - signature file -> OptionSet
@@ -94,6 +95,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
         this.am();

         // CraftBukkit start
+        this.scoreboard = new ScoreboardServer(this);
         this.options = options;
         try {
             this.reader = new ConsoleReader(System.in, System.out);
diff --git a/src/main/java/net/minecraft/server/ScoreboardObjective.java b/src/main/java/net/minecraft/server/ScoreboardObjective.java
index 1a4dca6..ed3bb2e 100644
--- a/src/main/java/net/minecraft/server/ScoreboardObjective.java
+++ b/src/main/java/net/minecraft/server/ScoreboardObjective.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;

+import org.bukkit.craftbukkit.scoreboard.CraftObjective; // CraftBukkit
+
 public class ScoreboardObjective {

     private final Scoreboard a;
@@ -30,4 +32,16 @@ public class ScoreboardObjective {
         this.d = s;
         this.a.handleObjectiveChanged(this);
     }
+
+    // CraftBukkit start
+    protected CraftObjective bukkitObjective;
+
+    public CraftObjective getBukkitObjective() {
+        if (this.bukkitObjective == null) {
+            this.bukkitObjective = new CraftObjective(this.a, this);
+        }
+
+        return this.bukkitObjective;
+    }
+    // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/ScoreboardTeam.java b/src/main/java/net/minecraft/server/ScoreboardTeam.java
index 34589a2..8d8683c 100644
--- a/src/main/java/net/minecraft/server/ScoreboardTeam.java
+++ b/src/main/java/net/minecraft/server/ScoreboardTeam.java
@@ -4,6 +4,8 @@ import java.util.Collection;
 import java.util.HashSet;
 import java.util.Set;

+import org.bukkit.craftbukkit.scoreboard.CraftTeam; // CraftBukkit
+
 public class ScoreboardTeam {

     private final Scoreboard a;
@@ -104,4 +106,16 @@ public class ScoreboardTeam {

         return i;
     }
+
+    // CraftBukkit start
+    protected CraftTeam bukkitTeam;
+
+    public CraftTeam getBukkitTeam() {
+        if (this.bukkitTeam == null) {
+            this.bukkitTeam = new CraftTeam(this);
+        }
+
+        return this.bukkitTeam;
+    }
+    // CraftBukkit end
 }
diff --git a/src/main/java/net/minecraft/server/SecondaryWorldServer.java b/src/main/java/net/minecraft/server/SecondaryWorldServer.java
index 94a2f05..5e3ea76 100644
--- a/src/main/java/net/minecraft/server/SecondaryWorldServer.java
+++ b/src/main/java/net/minecraft/server/SecondaryWorldServer.java
@@ -6,7 +6,7 @@ public class SecondaryWorldServer extends WorldServer {
         super(minecraftserver, idatamanager, s, i, worldsettings, methodprofiler, iconsolelogmanager, env, gen);
         // CraftBukkit end
         this.worldMaps = worldserver.worldMaps;
-        this.scoreboard = worldserver.getScoreboard();
+        // this.scoreboard = worldserver.getScoreboard(); // CraftBukkit
         // this.worldData = new SecondaryWorldData(worldserver.getWorldData()); // CraftBukkit - use unique worlddata
     }

diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index b694789..b7c4ea4 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -60,7 +60,7 @@ public abstract class World implements IBlockAccess {
     public final MethodProfiler methodProfiler;
     private final Vec3DPool J = new Vec3DPool(300, 2000);
     private final Calendar K = Calendar.getInstance();
-    protected Scoreboard scoreboard = new Scoreboard();
+    // protected Scoreboard scoreboard = new Scoreboard(); // CraftBukkit
     private final IConsoleLogManager logAgent;
     private UnsafeList M = new UnsafeList(); // CraftBukkit - ArrayList -> UnsafeList
     private boolean N;
@@ -2786,7 +2786,7 @@ public abstract class World implements IBlockAccess {
     }

     public Scoreboard getScoreboard() {
-        return this.scoreboard;
+        return MinecraftServer.getServer().scoreboard; // CraftBukkit
     }

     public void m(int i, int j, int k, int l) {
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index ce54462..61e150a 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -62,7 +62,7 @@ public class WorldServer extends World implements org.bukkit.BlockChangeDelegate
         }

         this.P = new org.bukkit.craftbukkit.CraftTravelAgent(this); // CraftBukkit
-        this.scoreboard = new ScoreboardServer(minecraftserver);
+        // this.scoreboard = new ScoreboardServer(minecraftserver); // CraftBukkit
         ScoreboardSaveData scoreboardsavedata = (ScoreboardSaveData) this.worldMaps.get(ScoreboardSaveData.class, "scoreboard");

         if (scoreboardsavedata == null) {
@@ -70,8 +70,8 @@ public class WorldServer extends World implements org.bukkit.BlockChangeDelegate
             this.worldMaps.a("scoreboard", scoreboardsavedata);
         }

-        scoreboardsavedata.a(this.scoreboard);
-        ((ScoreboardServer) this.scoreboard).a(scoreboardsavedata);
+        scoreboardsavedata.a(this.getScoreboard()); // CraftBukkit - use getScoreboard
+        ((ScoreboardServer) this.getScoreboard()).a(scoreboardsavedata); // CraftBukkit - use getScoreboard
     }

     // CraftBukkit start
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 6b3b9fe..f7b3077 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -82,6 +82,7 @@ import org.bukkit.craftbukkit.metadata.PlayerMetadataStore;
 import org.bukkit.craftbukkit.metadata.WorldMetadataStore;
 import org.bukkit.craftbukkit.potion.CraftPotionBrewer;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
 import org.bukkit.craftbukkit.updater.AutoUpdater;
 import org.bukkit.craftbukkit.updater.BukkitDLUpdaterService;
 import org.bukkit.craftbukkit.util.DatFileFilter;
@@ -162,6 +163,7 @@ public final class CraftServer implements Server {
     private File container;
     private WarningState warningState = WarningState.DEFAULT;
     private final BooleanWrapper online = new BooleanWrapper();
+    private final CraftScoreboard scoreboard;

     private final class BooleanWrapper {
         private boolean value = true;
@@ -176,6 +178,7 @@ public final class CraftServer implements Server {
         this.console = console;
         this.playerList = (DedicatedPlayerList) playerList;
         this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
+        this.scoreboard = new CraftScoreboard(MinecraftServer.getServer().scoreboard);
         online.value = console.getPropertyManager().getBoolean("online-mode", true);

         Bukkit.setServer(this);
@@ -1358,4 +1361,8 @@ public final class CraftServer implements Server {
     public CraftItemFactory getItemFactory() {
         return CraftItemFactory.instance();
     }
+
+    public CraftScoreboard getScoreboard() {
+        return this.scoreboard;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
new file mode 100644
index 0000000..8d1cca2
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
@@ -0,0 +1,67 @@
+package org.bukkit.craftbukkit.scoreboard;
+
+import net.minecraft.server.Scoreboard;
+import net.minecraft.server.ScoreboardObjective;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.scoreboard.Objective;
+import org.bukkit.scoreboard.Objective.Criteria;
+
+public class CraftObjective implements Objective {
+    private final Scoreboard scoreboard;
+    private final ScoreboardObjective handle;
+
+    public CraftObjective(Scoreboard scoreboard, ScoreboardObjective handle) {
+        this.scoreboard = scoreboard;
+        this.handle = handle;
+    }
+
+    public String getName() {
+        return this.getHandle().getName();
+    }
+
+    public String getDisplayName() {
+        return this.getHandle().getDisplayName();
+    }
+
+    public void setDisplayName(String displayName) {
+        Validate.notNull(displayName, "Display name can not be null");
+
+        this.getHandle().setDisplayName(displayName);
+    }
+
+    public Display getDisplaySlot() {
+        for(Display display : Display.values()) {
+            if(this.scoreboard.getObjectiveForSlot(CraftObjectiveDisplay.getDisplay(display)) == this.getHandle()) return display;
+        }
+
+        return Objective.Display.NONE;
+    }
+
+    public void setDisplaySlot(Display display) {
+        Validate.notNull(display, "Display slot can not be null");
+
+        if(display == Display.NONE) {
+            this.scoreboard.setDisplaySlot(CraftObjectiveDisplay.getDisplay(this.getDisplaySlot()), null);
+            return;
+        }
+        this.scoreboard.setDisplaySlot(CraftObjectiveDisplay.getDisplay(display), this.getHandle());
+    }
+
+    public int getScore(OfflinePlayer player) {
+        Validate.notNull(player, "Player can not be null");
+
+        return this.scoreboard.getPlayerScoreForObjective(player.getName(), this.getHandle()).getScore();
+    }
+
+    public void setScore(OfflinePlayer player, int score) {
+        Validate.notNull(player, "Player can not be null");
+
+        this.scoreboard.getPlayerScoreForObjective(player.getName(), this.getHandle()).setScore(score);
+    }
+
+    public ScoreboardObjective getHandle() {
+        return this.handle;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveCriteria.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveCriteria.java
new file mode 100644
index 0000000..8eaff4a
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveCriteria.java
@@ -0,0 +1,25 @@
+package org.bukkit.craftbukkit.scoreboard;
+
+import static org.bukkit.scoreboard.Objective.Criteria;
+
+import org.apache.commons.lang.Validate;
+
+public class CraftObjectiveCriteria {
+    private static String[] criterias = new String[Criteria.values().length];
+
+    static {
+        criterias[Criteria.PLAYER_KILL_COUNT.ordinal()] = "playerKillCount";
+        criterias[Criteria.TOTAL_KILL_COUNT.ordinal()] = "totalKillCount";
+        criterias[Criteria.DUMMY.ordinal()] = "dummy";
+        criterias[Criteria.HEALTH.ordinal()] = "health";
+        criterias[Criteria.DEATH_COUNT.ordinal()] = "deathCount";
+    }
+
+    public static String getCriteria(final Criteria criteria) {
+        Validate.notNull(criteria, "Criteria can not be null");
+        return criterias[criteria.ordinal()];
+    }
+
+    private CraftObjectiveCriteria() {
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveDisplay.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveDisplay.java
new file mode 100644
index 0000000..7e97472
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjectiveDisplay.java
@@ -0,0 +1,23 @@
+package org.bukkit.craftbukkit.scoreboard;
+
+import static org.bukkit.scoreboard.Objective.Display;
+
+import org.apache.commons.lang.Validate;
+
+public class CraftObjectiveDisplay {
+    private static int[] displays = new int[Display.values().length];
+
+    static {
+        displays[Display.LIST.ordinal()] = 0;
+        displays[Display.SIDEBAR.ordinal()] = 1;
+        displays[Display.BELOW_NAME.ordinal()] = 2;
+    }
+
+    public static int getDisplay(final Display display) {
+        Validate.notNull(display, "Display can not be null");
+        return displays[display.ordinal()];
+    }
+
+    private CraftObjectiveDisplay() {
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
new file mode 100644
index 0000000..a38de9b
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -0,0 +1,129 @@
+package org.bukkit.craftbukkit.scoreboard;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import net.minecraft.server.*;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.OfflinePlayer;
+import org.bukkit.scoreboard.Objective;
+import org.bukkit.scoreboard.Objective.Criteria;
+import org.bukkit.scoreboard.Scoreboard;
+import org.bukkit.scoreboard.Team;
+
+public class CraftScoreboard implements Scoreboard {
+
+    private final net.minecraft.server.Scoreboard handle;
+
+    public CraftScoreboard(net.minecraft.server.Scoreboard scoreboard) {
+        this.handle = scoreboard;
+    }
+
+    public Team createTeam(String name, String displayName) {
+        Validate.notNull(name, "Name can not be null");
+
+        Validate.isTrue(name.length() < 16, "Team names can only be a maximum of 16 characters long");
+        Validate.isTrue(displayName == null || displayName.length() < 32, "Team display names can only be a maximum of 32 characters long");
+        Validate.isTrue(this.getHandle().getTeam(name) == null, "Team " + name + " already exists");
+
+        ScoreboardTeam team = this.getHandle().createTeam(name);
+        if(displayName != null) {
+            team.setDisplayName(displayName);
+        }
+
+        return team.getBukkitTeam();
+    }
+
+    public Team getTeam(String name) {
+        ScoreboardTeam team = this.getHandle().getTeam(name);
+
+        if(team != null) {
+            return team.getBukkitTeam();
+        }
+
+        return null;
+    }
+
+    public Set<Team> getTeams() {
+        Set<Team> result = new HashSet<Team>();
+
+        for (Object team : this.getHandle().getTeams()) {
+            result.add(((ScoreboardTeam) team).getBukkitTeam());
+        }
+
+        return result;
+    }
+
+    public void setTeam(OfflinePlayer player, Team team) {
+        Validate.notNull(player, "Player can not be null");
+
+        if(team == null) {
+            this.getHandle().removePlayerFromTeam(player.getName());
+        } else {
+            this.getHandle().addPlayerToTeam(player.getName(), ((CraftTeam) team).getHandle());
+        }
+    }
+
+    public void removeTeam(Team team) {
+        Validate.notNull(team, "Team can not be null");
+
+        this.getHandle().removeTeam(((CraftTeam) team).getHandle());
+    }
+
+    public Objective createObjective(String name, Criteria criteria, String displayName) {
+        Validate.notNull(name, "Name can not be null");
+        Validate.notNull(criteria, "Criteria can not be null");
+
+        Validate.isTrue(name.length() < 16, "Objective names can only be a maximum of 16 characters long");
+        Validate.isTrue(displayName == null || displayName.length() < 32, "Objective display names can only be a maximum of 32 characters long");
+
+        Validate.isTrue(this.getHandle().getObjective(name) == null, "Objective already exists");
+
+        IScoreboardCriteria iobjective = (IScoreboardCriteria) IScoreboardCriteria.a.get(criteria.toString());
+
+        ScoreboardObjective objective = this.getHandle().registerObjective(name, iobjective);
+
+        if(displayName != null) {
+            objective.setDisplayName(displayName);
+        }
+
+        return objective.getBukkitObjective();
+    }
+
+    public Objective getObjective(String name) {
+        ScoreboardObjective objective = this.getHandle().getObjective(name);
+
+        if(objective == null) {
+            return null;
+        }
+
+        return objective.getBukkitObjective();
+    }
+
+    public Set<Objective> getObjectives() {
+        Set<Objective> result = new HashSet<Objective>();
+
+        for (Object objective : this.getHandle().getObjectives()) {
+            result.add(((ScoreboardObjective) objective).getBukkitObjective());
+        }
+
+        return result;
+    }
+
+    public void removeObjective(Objective objective) {
+        Validate.notNull(objective, "Objective can not be null");
+
+        this.getHandle().unregisterObjective(((CraftObjective) objective).getHandle());
+    }
+
+    public void resetScores(OfflinePlayer player) {
+        Validate.notNull(player, "Player can not be null");
+
+        this.getHandle().resetPlayerScores(player.getName());
+    }
+
+    public net.minecraft.server.Scoreboard getHandle() {
+        return this.handle;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
new file mode 100644
index 0000000..33d5e9e
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -0,0 +1,68 @@
+package org.bukkit.craftbukkit.scoreboard;
+
+import net.minecraft.server.ScoreboardTeam;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.scoreboard.Team;
+
+public class CraftTeam implements Team {
+    private final ScoreboardTeam handle;
+
+    public CraftTeam(ScoreboardTeam handle) {
+        this.handle = handle;
+    }
+
+    public String getName() {
+        return this.getHandle().getName();
+    }
+
+    public String getDisplayName() {
+        return this.getHandle().getDisplayName();
+    }
+
+    public void setDisplayName(String displayName) {
+        Validate.notNull(displayName, "Display name can not be null");
+
+        this.getHandle().setDisplayName(displayName);
+    }
+
+    public String getPrefix() {
+        return this.getHandle().getPrefix();
+    }
+
+    public void setPrefix(String prefix) {
+        Validate.notNull(prefix, "Prefix can not be null");
+
+        this.getHandle().setPrefix(prefix);
+    }
+
+    public String getSuffix() {
+        return this.getHandle().getSuffix();
+    }
+
+    public void setSuffix(String suffix) {
+        Validate.notNull(suffix, "Suffix can not be null");
+
+        this.getHandle().setSuffix(suffix);
+    }
+
+    public boolean allowFriendlyFire() {
+        return this.getHandle().allowFriendlyFire();
+    }
+
+    public void setAllowFriendlyFire(boolean friendlyFire) {
+        this.getHandle().setAllowFriendlyFire(friendlyFire);
+    }
+
+    public boolean canSeeFriendlyInvisibles() {
+        return this.getHandle().canSeeFriendlyInvisibles();
+    }
+
+    public void setSeeFriendlyInvisibles(boolean seeFriendlyInvisibles) {
+        this.getHandle().setCanSeeFriendlyInvisibles(seeFriendlyInvisibles);
+    }
+
+    public ScoreboardTeam getHandle() {
+        return this.handle;
+    }
+}
--
1.7.9.6 (Apple Git-31.1)


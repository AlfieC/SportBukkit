From 49063852fc4d3beaddd88cbd3a3665da5845964a Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Thu, 16 May 2013 17:26:35 -0500
Subject: [PATCH] Add an Ignorant Effects API

---
 .../java/net/minecraft/server/DataWatcher.java     |    8 ++--
 .../java/net/minecraft/server/EntityPlayer.java    |   10 ++++-
 .../net/minecraft/server/EntityTrackerEntry.java   |   45 +++++++++++++++++---
 src/main/java/net/minecraft/server/PlayerList.java |   10 ++++-
 .../org/bukkit/craftbukkit/entity/CraftPlayer.java |   37 ++++++++++++++++
 5 files changed, 98 insertions(+), 12 deletions(-)

diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
index d7402b6..0ac876d 100644
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -16,7 +16,7 @@ public class DataWatcher {
     private boolean a = true;
     private static final HashMap b = new HashMap();
     private final Map c = new HashMap();
-    private boolean d;
+    public boolean d; // CraftBukkit - private -> public
     private ReadWriteLock e = new ReentrantReadWriteLock();

     public DataWatcher() {}
@@ -137,7 +137,8 @@ public class DataWatcher {
                         arraylist = new ArrayList();
                     }

-                    arraylist.add(watchableobject);
+                    // CraftBukkit - don't store reference to existing watchableobject
+                    arraylist.add(new WatchableObject(watchableobject.c(), watchableobject.a(), watchableobject.b()));
                 }
             }

@@ -169,7 +170,8 @@ public class DataWatcher {

         WatchableObject watchableobject;

-        for (Iterator iterator = this.c.values().iterator(); iterator.hasNext(); arraylist.add(watchableobject)) {
+        // CraftBukkit - don't store reference to existing watchableobject
+        for (Iterator iterator = this.c.values().iterator(); iterator.hasNext(); arraylist.add(new WatchableObject(watchableobject.c(), watchableobject.a(), watchableobject.b()))) {
             watchableobject = (WatchableObject) iterator.next();
             if (arraylist == null) {
                 arraylist = new ArrayList();
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 7de5b48..d7f9223 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -731,12 +731,18 @@ public class EntityPlayer extends EntityHuman implements ICrafting {

     protected void a(MobEffect mobeffect) {
         super.a(mobeffect);
-        this.playerConnection.sendPacket(new Packet41MobEffect(this.id, mobeffect));
+        // CraftBukkit - account for ignorant effects
+        if (!this.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+            this.playerConnection.sendPacket(new Packet41MobEffect(this.id, mobeffect));
+        }
     }

     protected void b(MobEffect mobeffect) {
         super.b(mobeffect);
-        this.playerConnection.sendPacket(new Packet41MobEffect(this.id, mobeffect));
+        // CraftBukkit - account for ignorant effects
+        if (!this.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+            this.playerConnection.sendPacket(new Packet41MobEffect(this.id, mobeffect));
+        }
     }

     protected void c(MobEffect mobeffect) {
diff --git a/src/main/java/net/minecraft/server/EntityTrackerEntry.java b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
index 5c03732..6f4432f 100644
--- a/src/main/java/net/minecraft/server/EntityTrackerEntry.java
+++ b/src/main/java/net/minecraft/server/EntityTrackerEntry.java
@@ -99,7 +99,7 @@ public class EntityTrackerEntry {
             DataWatcher i9 = this.tracker.getDataWatcher();

             if (i9.a()) {
-                this.broadcastIncludingSelf(new Packet40EntityMetadata(this.tracker.id, i9, false));
+                this.broadcastMetadataIncludingSelf(i9, false); // CraftBukkit - custom metadata sender
             }
         } else if (this.m % this.c == 0 || this.tracker.an || this.tracker.getDataWatcher().a()) {
             int i;
@@ -174,7 +174,7 @@ public class EntityTrackerEntry {
                 DataWatcher datawatcher1 = this.tracker.getDataWatcher();

                 if (datawatcher1.a()) {
-                    this.broadcastIncludingSelf(new Packet40EntityMetadata(this.tracker.id, datawatcher1, false));
+                    this.broadcastMetadataIncludingSelf(datawatcher1, false); // CraftBukkit - custom metadata sender
                 }

                 /* CraftBukkit start - Code moved up
@@ -208,7 +208,7 @@ public class EntityTrackerEntry {
                 DataWatcher datawatcher2 = this.tracker.getDataWatcher();

                 if (datawatcher2.a()) {
-                    this.broadcastIncludingSelf(new Packet40EntityMetadata(this.tracker.id, datawatcher2, false));
+                    this.broadcastMetadataIncludingSelf(datawatcher2, false); // CraftBukkit - custom metadata sender
                 }

                 this.w = true;
@@ -268,6 +268,38 @@ public class EntityTrackerEntry {
         }
     }

+    // CraftBukkit start - custom metadata sender
+    private void broadcastMetadataIncludingSelf(DataWatcher datawatcher, boolean flag) {
+        Iterator iterator = this.trackedPlayers.iterator();
+
+        while (iterator.hasNext()) {
+            this.sendMetadata((EntityPlayer) iterator.next(), datawatcher, flag);
+        }
+
+        if (this.tracker instanceof EntityPlayer) {
+            this.sendMetadata((EntityPlayer) this.tracker, datawatcher, flag);
+        }
+    }
+
+    private void sendMetadata(EntityPlayer entityplayer, DataWatcher datawatcher, boolean flag) {
+        boolean isInvisible = false;
+
+        if (entityplayer.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(MobEffectList.INVISIBILITY.getId()))) {
+            isInvisible = this.tracker.isInvisible();
+            if(isInvisible) {
+                this.tracker.setInvisible(false);
+            }
+        }
+
+        entityplayer.playerConnection.sendPacket(new Packet40EntityMetadata(this.tracker.id, datawatcher, flag));
+
+        if (isInvisible) {
+            this.tracker.setInvisible(true);
+            datawatcher.d = false;
+        }
+    }
+    // CraftBukkit end
+
     public void a() {
         Iterator iterator = this.trackedPlayers.iterator();

@@ -308,7 +340,7 @@ public class EntityTrackerEntry {

                     entityplayer.playerConnection.sendPacket(packet);
                     if (!this.tracker.getDataWatcher().d()) {
-                        entityplayer.playerConnection.sendPacket(new Packet40EntityMetadata(this.tracker.id, this.tracker.getDataWatcher(), true));
+                        this.sendMetadata(entityplayer, this.tracker.getDataWatcher(), true); // CraftBukkit - custom metadata sender
                     }

                     this.j = this.tracker.motX;
@@ -356,7 +388,10 @@ public class EntityTrackerEntry {
                         while (iterator.hasNext()) {
                             MobEffect mobeffect = (MobEffect) iterator.next();

-                            entityplayer.playerConnection.sendPacket(new Packet41MobEffect(this.tracker.id, mobeffect));
+                            // CraftBukkit - account for ignorant effects
+                            if (!entityplayer.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+                                entityplayer.playerConnection.sendPacket(new Packet41MobEffect(this.tracker.id, mobeffect));
+                            }
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
index b7e327b..3db98b3 100644
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -110,7 +110,10 @@ public abstract class PlayerList {
         while (iterator.hasNext()) {
             MobEffect mobeffect = (MobEffect) iterator.next();

-            playerconnection.sendPacket(new Packet41MobEffect(entityplayer.id, mobeffect));
+            // CraftBukkit - account for ignorant effects
+            if (!entityplayer.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+                playerconnection.sendPacket(new Packet41MobEffect(entityplayer.id, mobeffect));
+            }
         }

         entityplayer.syncInventory();
@@ -461,7 +464,10 @@ public abstract class PlayerList {
         while (iterator.hasNext()) {
             MobEffect mobeffect = (MobEffect) iterator.next();

-            entityplayer1.playerConnection.sendPacket(new Packet41MobEffect(entityplayer1.id, mobeffect));
+            // CraftBukkit - account for ignorant effects
+            if (!entityplayer1.getBukkitEntity().hasIgnorantEffect(org.bukkit.potion.PotionEffectType.getById(mobeffect.getEffectId()))) {
+                entityplayer1.playerConnection.sendPacket(new Packet41MobEffect(entityplayer1.id, mobeffect));
+            }
         }
         // entityplayer1.syncInventory();
         // CraftBukkit end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 8c30bf5..d652b0d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -50,6 +50,7 @@ import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.messaging.Messenger;
 import org.bukkit.plugin.messaging.StandardMessenger;
+import org.bukkit.potion.PotionEffectType;
 import org.bukkit.scoreboard.Scoreboard;

 @DelegateDeserialization(CraftOfflinePlayer.class)
@@ -60,6 +61,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private final ConversationTracker conversationTracker = new ConversationTracker();
     private final Set<String> channels = new HashSet<String>();
     private final Map<String, Player> hiddenPlayers = new MapMaker().softValues().makeMap();
+    private final Set<PotionEffectType> ignorantEffects = new HashSet<PotionEffectType>();
     private int hash = 0;

     public CraftPlayer(CraftServer server, EntityPlayer entity) {
@@ -993,4 +995,39 @@ public class CraftPlayer extends CraftHumanEntity implements Player {

         this.server.getScoreboardManager().setPlayerBoard(this, scoreboard);
     }
+
+    public Set<PotionEffectType> getIgnorantEffects() {
+        return ImmutableSet.copyOf(this.ignorantEffects);
+    }
+
+    public void clearIgnorantEffects() {
+        this.ignorantEffects.clear();
+
+        EntityTracker tracker = ((WorldServer) getHandle().world).tracker;
+        tracker.updatePlayers();
+    }
+
+    public void addIgnorantEffect(PotionEffectType effect) {
+        Validate.notNull(effect, "Effect cannot be null");
+
+        this.ignorantEffects.add(effect);
+
+        EntityTracker tracker = ((WorldServer) getHandle().world).tracker;
+        tracker.updatePlayers();
+    }
+
+    public void removeIgnorantEffect(PotionEffectType effect) {
+        Validate.notNull(effect, "Effect cannot be null");
+
+        this.ignorantEffects.remove(effect);
+
+        EntityTracker tracker = ((WorldServer) getHandle().world).tracker;
+        tracker.updatePlayers();
+    }
+
+    public boolean hasIgnorantEffect(PotionEffectType effect) {
+        Validate.notNull(effect, "Effect cannot be null");
+
+        return this.ignorantEffects.contains(effect);
+    }
 }
--
1.7.9.6 (Apple Git-31.1)


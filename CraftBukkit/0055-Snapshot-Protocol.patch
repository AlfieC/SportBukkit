From ab63c8d8bfc71c3fdd9bc0e5c7444238458a8525 Mon Sep 17 00:00:00 2001
From: md_5 <md_5@live.com.au>
Date: Mon, 8 Jul 2013 21:27:40 +1000
Subject: [PATCH] Snapshot Protocol


diff --git a/pom.xml b/pom.xml
index 4d2e1a5..7b1105c 100644
--- a/pom.xml
+++ b/pom.xml
@@ -4,7 +4,7 @@
   <groupId>tc.oc</groupId>
   <artifactId>sportbukkit</artifactId>
   <packaging>jar</packaging>
-  <version>1.6.1-R0.1-SNAPSHOT</version>
+  <version>1.6.2-R0.1-SNAPSHOT</version>
   <name>SportBukkit</name>
   <url>https://oc.tc</url>
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 2287030..c4dff50 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -998,13 +998,13 @@ public abstract class EntityLiving extends Entity {
 
     public void setSprinting(boolean flag) {
         super.setSprinting(flag);
-        if (!this.world.isStatic) {
-            AttributeInstance attributeinstance = this.a(GenericAttributes.d);
-
+        AttributeInstance attributeinstance = this.a(GenericAttributes.d);
+        if (attributeinstance.a(b) != null) {
             attributeinstance.b(c);
-            if (flag) {
-                attributeinstance.a(c);
-            }
+        }
+
+        if (flag) {
+            attributeinstance.a(c);
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/server/ItemBlock.java
index b2c3ed8..57040ce 100644
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/server/ItemBlock.java
@@ -110,6 +110,11 @@ public class ItemBlock extends Item {
 
             world.makeSound((double) ((float) x + 0.5F), (double) ((float) y + 0.5F), (double) ((float) z + 0.5F), block.stepSound.getPlaceSound(), (block.stepSound.getVolume1() + 1.0F) / 2.0F, block.stepSound.getVolume2() * 0.8F);
         }
+        // Spigot Start
+        if (block instanceof BlockSign) {
+            ((EntityPlayer) entityhuman).playerConnection.sendPacket(new Packet133SignPlace(x, y, z));
+        }
+        // Spigot End
 
         if (itemstack != null) {
             --itemstack.count;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index d51a003..e7aaac0 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -755,7 +755,7 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
     }
 
     public String getVersion() {
-        return "1.6.1";
+        return "1.6.2";
     }
 
     public int A() {
diff --git a/src/main/java/net/minecraft/server/Packet.java b/src/main/java/net/minecraft/server/Packet.java
index b11c26b..47836ee 100644
--- a/src/main/java/net/minecraft/server/Packet.java
+++ b/src/main/java/net/minecraft/server/Packet.java
@@ -321,6 +321,7 @@ public abstract class Packet {
         a(130, true, true, Packet130UpdateSign.class);
         a(131, true, false, Packet131ItemData.class);
         a(132, true, false, Packet132TileEntityData.class);
+        a(133, true, false, Packet133SignPlace.class);
         a(200, true, false, Packet200Statistic.class);
         a(201, true, false, Packet201PlayerInfo.class);
         a(202, true, true, Packet202Abilities.class);
diff --git a/src/main/java/net/minecraft/server/Packet133SignPlace.java b/src/main/java/net/minecraft/server/Packet133SignPlace.java
new file mode 100644
index 0000000..c83800f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet133SignPlace.java
@@ -0,0 +1,49 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+public class Packet133SignPlace extends Packet
+{
+
+    private int x, y, z;
+
+    public Packet133SignPlace()
+    {
+    }
+
+    public Packet133SignPlace(int x, int y, int z)
+    {
+        this.x = x;
+        this.y = y;
+        this.z = z;
+    }
+
+    @Override
+    public void a(DataInput datainput) throws IOException
+    {
+        throw new UnsupportedOperationException( "Not supported yet." );
+    }
+
+    @Override
+    public void a(DataOutput dataoutput) throws IOException
+    {
+        dataoutput.writeByte( 0 );
+        dataoutput.writeInt( x );
+        dataoutput.writeInt( y );
+        dataoutput.writeInt( z );
+    }
+
+    @Override
+    public void handle(Connection connection)
+    {
+        throw new UnsupportedOperationException( "Not supported yet." );
+    }
+
+    @Override
+    public int a()
+    {
+        return 13;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Packet44UpdateAttributes.java b/src/main/java/net/minecraft/server/Packet44UpdateAttributes.java
new file mode 100644
index 0000000..9c1e592
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Packet44UpdateAttributes.java
@@ -0,0 +1,59 @@
+package net.minecraft.server;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
+public class Packet44UpdateAttributes extends Packet {
+
+    private int a;
+    private final java.util.List<AttributeModifiable> b = new java.util.ArrayList<AttributeModifiable>();
+
+    public Packet44UpdateAttributes() {}
+
+    public Packet44UpdateAttributes(int i, Collection collection) {
+        this.a = i;
+        Iterator iterator = collection.iterator();
+
+        while (iterator.hasNext()) {
+            AttributeModifiable attributeinstance = (AttributeModifiable) iterator.next();
+
+            this.b.add(attributeinstance);
+        }
+    }
+
+    public void a(DataInput datainput) throws java.io.IOException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void a(DataOutput dataoutput) throws java.io.IOException {
+        dataoutput.writeInt(this.a);
+        dataoutput.writeInt(this.b.size());
+
+        for (AttributeModifiable attribute : this.b) {
+            a(attribute.a().a(), dataoutput);
+            dataoutput.writeDouble(attribute.b());
+            dataoutput.writeShort(attribute.c().size());
+
+            for (Object o : attribute.c()) {
+                AttributeModifier modifier = (AttributeModifier) o;
+                dataoutput.writeLong(modifier.a().getMostSignificantBits());
+                dataoutput.writeLong(modifier.a().getLeastSignificantBits());
+                dataoutput.writeDouble(modifier.d());
+                dataoutput.writeByte(modifier.c());
+            }
+        }
+    }
+
+    public void handle(Connection connection) {
+        connection.a(this);
+    }
+
+    public int a() {
+        return 8 + this.b.size() * 24;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PendingConnection.java b/src/main/java/net/minecraft/server/PendingConnection.java
index e478054..5be613e 100644
--- a/src/main/java/net/minecraft/server/PendingConnection.java
+++ b/src/main/java/net/minecraft/server/PendingConnection.java
@@ -74,8 +74,8 @@ public class PendingConnection extends Connection {
         } else {
             PublicKey publickey = this.server.H().getPublic();
 
-            if (packet2handshake.d() != 73) {
-                if (packet2handshake.d() > 73) {
+            if (packet2handshake.d() != 74) {
+                if (packet2handshake.d() > 74) {
                     this.disconnect("Outdated server!");
                 } else {
                     this.disconnect("Outdated client!");
@@ -159,7 +159,7 @@ public class PendingConnection extends Connection {
                 s = ChatColor.stripColor(pingEvent.getMotd() + "\u00A7" + pingEvent.getNumPlayers() + "\u00A7" + pingEvent.getMaxPlayers());
             } else {
                 // CraftBukkit start - Don't create a list from an array
-                Object[] list = new Object[] { 1, 73, this.server.getVersion(), pingEvent.getMotd(), pingEvent.getNumPlayers(), pingEvent.getMaxPlayers() };
+                Object[] list = new Object[] { 1, 74, this.server.getVersion(), pingEvent.getMotd(), pingEvent.getNumPlayers(), pingEvent.getMaxPlayers() };
 
                 StringBuilder builder = new StringBuilder();
                 for (Object object : list) {
-- 
1.7.12.4 (Apple Git-37)


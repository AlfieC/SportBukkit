From ae7e3cf583e33d21f17dea3b589350ed75cee5b8 Mon Sep 17 00:00:00 2001
From: mrapple <tony@oc.tc>
Date: Tue, 10 Jun 2014 04:24:59 -0500
Subject: [PATCH] Calm netty lag by sending packets every tick


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a41c668..e8931e3 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -675,6 +675,12 @@ public abstract class MinecraftServer implements ICommandListener, Runnable, IMo
             ((IUpdatePlayerListBox) this.n.get(i)).a();
         }
 
+        // Send pending packets to everyone
+        for (i = 0; i < this.getPlayerList().players.size(); ++i) {
+            EntityPlayer entityplayer = (EntityPlayer) this.getPlayerList().players.get(i);
+            entityplayer.playerConnection.networkManager.i();
+        }
+
         this.methodProfiler.b();
     }
 
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
index a73cf27..9addd9f 100644
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -117,13 +117,11 @@ public class NetworkManager extends SimpleChannelInboundHandler {
 
     public void handle(Packet packet, GenericFutureListener... agenericfuturelistener) {
         if (this.m != null && this.m.isOpen()) {
-            this.i();
-            this.b(packet, agenericfuturelistener);
-        } else {
             this.l.add(new QueuedPacket(packet, agenericfuturelistener));
         }
     }
 
+    /*
     private void b(Packet packet, GenericFutureListener[] agenericfuturelistener) {
         EnumProtocol enumprotocol = EnumProtocol.a(packet);
         EnumProtocol enumprotocol1 = (EnumProtocol) this.m.attr(d).get();
@@ -143,14 +141,36 @@ public class NetworkManager extends SimpleChannelInboundHandler {
             this.m.eventLoop().execute(new QueuedProtocolSwitch(this, enumprotocol, enumprotocol1, packet, agenericfuturelistener));
         }
     }
+    */
 
-    private void i() {
+    public void i() {
         if (this.m != null && this.m.isOpen()) {
-            while (!this.l.isEmpty()) {
-                QueuedPacket queuedpacket = (QueuedPacket) this.l.poll();
 
-                this.b(QueuedPacket.a(queuedpacket), QueuedPacket.b(queuedpacket));
-            }
+            final Queue queue = Queues.newConcurrentLinkedQueue(this.l);
+            this.l.clear();
+
+            this.m.eventLoop().execute(new Runnable(){
+                public void run() {
+                    NetworkManager manager = NetworkManager.this;
+
+                    while (!queue.isEmpty()) {
+                        QueuedPacket queuedpacket = (QueuedPacket) queue.poll();
+
+                        Packet packet = QueuedPacket.a(queuedpacket);
+                        GenericFutureListener[] listeners = QueuedPacket.b(queuedpacket);
+                        EnumProtocol toProtocol = EnumProtocol.a(packet);
+                        EnumProtocol fromProtocol = (EnumProtocol) NetworkManager.a(manager).attr(manager.d).get();
+
+                        if (toProtocol != fromProtocol) {
+                            manager.a(toProtocol);
+                        }
+
+                        NetworkManager.a(manager).write(packet).addListeners(listeners).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                    }
+
+                    NetworkManager.a(manager).flush();
+                }
+            });
         }
     }
 
-- 
1.8.5.1


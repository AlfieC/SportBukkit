From d2d8d80d8d7bf72e039196aa828750813fc826f1 Mon Sep 17 00:00:00 2001
From: Gael Ribes <ribesg@yahoo.fr>
Date: Sat, 10 May 2014 18:33:29 +0200
Subject: [PATCH] Add Rich chat API. Adds BUKKIT-5245


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 2ed3eaa..c21627b 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -10,6 +10,7 @@ import java.util.UUID;
 import java.util.logging.Logger;
 
 import org.bukkit.Warning.WarningState;
+import org.bukkit.chat.RichMessage;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.command.PluginCommand;
@@ -173,6 +174,13 @@ public final class Bukkit {
     }
 
     /**
+     * @see Server#broadcastMessage(org.bukkit.chat.RichMessage message)
+     */
+    public static int broadcastMessage(RichMessage message) {
+        return server.broadcastMessage(message);
+    }
+
+    /**
      * @see Server#getUpdateFolder()
      */
     public static String getUpdateFolder() {
@@ -436,6 +444,13 @@ public final class Bukkit {
     }
 
     /**
+     * @see Server#broadcast(RichMessage message, String permission)
+     */
+    public static int broadcast(RichMessage message, String permission) {
+        return server.broadcast(message, permission);
+    }
+
+    /**
      * @see Server#getOfflinePlayer(String name)
      */
     @Deprecated
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 2452a57..ce82566 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -10,6 +10,7 @@ import java.util.UUID;
 import java.util.logging.Logger;
 
 import org.bukkit.Warning.WarningState;
+import org.bukkit.chat.RichMessage;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
@@ -197,6 +198,17 @@ public interface Server extends PluginMessageRecipient {
     public int broadcastMessage(String message);
 
     /**
+     * Broadcast a rich message to all players.
+     * <p>
+     * This is the same as calling {@link #broadcast(RichMessage, String)}
+     * to {@link #BROADCAST_CHANNEL_USERS}
+     *
+     * @param message the rich message
+     * @return the number of players
+     */
+    public int broadcastMessage(RichMessage message);
+
+    /**
      * Gets the name of the update folder. The update folder is used to safely
      * update plugins at the right moment on a plugin load.
      * <p>
@@ -570,6 +582,17 @@ public interface Server extends PluginMessageRecipient {
     public int broadcast(String message, String permission);
 
     /**
+     * Broadcasts the specified rich message to every user with the given
+     * permission name.
+     *
+     * @param message rich message to broadcast
+     * @param permission the required permission {@link Permissible
+     *     permissibles} must have to receive the broadcast
+     * @return number of message recipients
+     */
+    public int broadcast(RichMessage message, String permission);
+
+    /**
      * Gets the player by the given name, regardless if they are offline or
      * online.
      * <p>
diff --git a/src/main/java/org/bukkit/chat/AchievementMessagePart.java b/src/main/java/org/bukkit/chat/AchievementMessagePart.java
new file mode 100644
index 0000000..f2f1e1f
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/AchievementMessagePart.java
@@ -0,0 +1,149 @@
+package org.bukkit.chat;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Achievement;
+import org.bukkit.Utility;
+
+import java.util.Map;
+
+/**
+ * Represents a message part with a tooltip like the one which can be seen in
+ * the Vanilla <b>"Achievement got"</b> message.
+ * <p>
+ * Note that the tooltip is fixed to the {@link Achievement} and cannot be
+ * altered.
+ */
+public class AchievementMessagePart extends RichMessagePart {
+
+    private Achievement achievement;
+
+    /**
+     * Creates a new AchievementMessagePart with the given
+     * {@link Achievement}.
+     * <p>
+     * The representation of the text message defaults to minecraft's
+     * <b>"Achievement got"</b> design.
+     *
+     * @param achievement the {@link Achievement} that should be displayed
+     */
+    public AchievementMessagePart(Achievement achievement) {
+        this(achievement, (String) null);
+    }
+
+    /**
+     * Creates a new AchievementMessagePart with the given
+     * {@link Achievement} and the given {@link ClickAction}.
+     * <p>
+     * The representation of the text message defaults to minecraft's
+     * <b>"Achievement got"</b> design.
+     *
+     * @param achievement the {@link Achievement} that should be displayed
+     * @param clickAction the action executed when the player click on this
+     *     {@link RichMessagePart}
+     */
+    public AchievementMessagePart(Achievement achievement, ClickAction clickAction) {
+        this(achievement, (String) null, clickAction);
+    }
+
+    /**
+     * Creates a new AchievementMessagePart with the given
+     * {@link Achievement}.
+     * <p>
+     * Note that the text can contain {@link org.bukkit.ChatColor} codes.
+     *
+     * @param achievement the {@link Achievement} that should be displayed
+     * @param customText the text of this {@link RichMessagePart}
+     */
+    public AchievementMessagePart(Achievement achievement, String customText) {
+        super(Type.ACHIEVEMENT, customText);
+        Validate.notNull(achievement, "AchievementMessagePart's can't be null");
+        this.achievement = achievement;
+    }
+
+    /**
+     * Creates a new AchievementMessagePart with the given
+     * {@link Achievement} and the given {@link ClickAction}.
+     * <p>
+     * Note that the text can contain {@link org.bukkit.ChatColor} codes.
+     *
+     * @param achievement the {@link Achievement} that should be displayed
+     * @param customText the text of this {@link RichMessagePart}
+     * @param clickAction the action executed when the player click on this
+     *     {@link RichMessagePart}
+     */
+    public AchievementMessagePart(Achievement achievement, String customText, ClickAction clickAction) {
+        super(Type.ACHIEVEMENT, customText, clickAction);
+        Validate.notNull(achievement, "AchievementMessagePart's can't be null");
+        this.achievement = achievement;
+    }
+
+    /**
+     * Creates a new AchievementMessagePart with the given
+     * {@link Achievement}.
+     *
+     * @param achievement the {@link Achievement} that should be displayed
+     * @param customText the localized text of this {@link RichMessagePart}
+     */
+    public AchievementMessagePart(Achievement achievement, LocalizedText customText) {
+        super(Type.ACHIEVEMENT, customText);
+        Validate.notNull(achievement, "AchievementMessagePart's can't be null");
+        this.achievement = achievement;
+    }
+
+    /**
+     * Creates a new AchievementMessagePart with the given
+     * {@link Achievement}.
+     *
+     * @param achievement the {@link Achievement} that should be displayed
+     * @param customText the localized text of this {@link RichMessagePart}
+     * @param clickAction the action executed when the player click on this
+     *     {@link RichMessagePart}
+     */
+    public AchievementMessagePart(Achievement achievement, LocalizedText customText, ClickAction clickAction) {
+        super(Type.ACHIEVEMENT, customText, clickAction);
+        Validate.notNull(achievement, "AchievementMessagePart's can't be null");
+        this.achievement = achievement;
+    }
+
+    /**
+     * Gets the {@link Achievement} connected to this
+     * {@link RichMessagePart}.
+     * <p>
+     * The {@link Achievement}'s tooltip will be shown when the player hover
+     * on the text of this {@link RichMessagePart}.
+     *
+     * @return the {@link Achievement} connected to this RichMessagePart
+     */
+    public Achievement getAchievement() {
+        return achievement;
+    }
+
+    /**
+     * Sets the {@link Achievement} connected to this
+     * {@link RichMessagePart}.
+     * <p>
+     * The {@link Achievement}'s tooltip will be shown when the player hover
+     * on the text of this {@link RichMessagePart}.
+     *
+     * @param achievement the new {@link Achievement} connected to this
+     *     RichMessagePart
+     */
+    public void setAchievement(Achievement achievement) {
+        Validate.notNull(achievement, "AchievementMessagePart's can't be null");
+        this.achievement = achievement;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + achievement.hashCode();
+        return result;
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = super.serialize();
+        result.put("achievement", achievement.name());
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/ChatAction.java b/src/main/java/org/bukkit/chat/ChatAction.java
new file mode 100644
index 0000000..8fa4bd3
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/ChatAction.java
@@ -0,0 +1,77 @@
+package org.bukkit.chat;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Utility;
+
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+/**
+ * Represents the action to send the specified chat message or command to the
+ * server as the Player when clicked client side.
+ */
+public class ChatAction extends ClickAction {
+
+    private String text;
+
+    /**
+     * Builds a new ChatAction, which will send the given text to the server
+     * as the Player when clicked client side.
+     * <p>
+     * The provided text can be either a simple chat message or a command
+     * (starting with a <b>/</b>).
+     *
+     * @param text the text that should be sent to the server
+     */
+    public ChatAction(String text) {
+        super(Type.CHAT);
+        Validate.notNull(text, "ChatAction's text can't be null");
+        this.text = text;
+    }
+
+    /**
+     * Gets the text that is sent to the server as the Player when clicked
+     * client side.
+     *
+     * @return the text to send to the server
+     */
+    public String getText() {
+        return text;
+    }
+
+    /**
+     * Sets the text that is send to the server as the Player when clicked
+     * client side.
+     *
+     * @param text the new text send to the server
+     */
+    public void setText(String text) {
+        Validate.notNull(text, "ChatAction's text can't be null");
+        this.text = text;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + text.hashCode();
+        return result;
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        result.put("text", text);
+        return result;
+    }
+
+    /**
+     * Required method for configuration serialization.
+     *
+     * @param args map to deserialize
+     * @return deserialized ChatAction
+     * @see org.bukkit.configuration.serialization.ConfigurationSerializable
+     */
+    public static ChatAction deserialize(Map<String, Object> args) {
+        return new ChatAction((String) args.get("text"));
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/ClickAction.java b/src/main/java/org/bukkit/chat/ClickAction.java
new file mode 100644
index 0000000..cd9f4e2
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/ClickAction.java
@@ -0,0 +1,101 @@
+package org.bukkit.chat;
+
+import org.bukkit.Utility;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+/**
+ * Represents an action triggered client side by clicking the particular
+ * {@link org.bukkit.chat.RichMessagePart} in the {@link RichMessage}.
+ * The type of action triggered by this is specified by {@link Type}.
+ * <p>
+ * <b>Note:</b> You should not extend this class. Ready to use click action
+ * classes are provided by Bukkit. Any feature that is not (yet)
+ * covered by these classes cannot be used.
+ *
+ * @see org.bukkit.chat.ChatAction
+ * @see org.bukkit.chat.OpenUrlAction
+ * @see org.bukkit.chat.SuggestChatAction
+ */
+public abstract class ClickAction implements ConfigurationSerializable {
+
+    /**
+     * The supported types of click actions.
+     */
+    public enum Type {
+        /**
+         * Opens the url or the "do you really want to open that URL" prompt
+         * on click. Depending on the player's chat settings.
+         */
+        OPEN_URL,
+
+        /**
+         * Runs/Sends a command/chat message on click.
+         */
+        CHAT,
+
+        /**
+         * Type a command/chat message to the chat input on click, but does
+         * not send it to the server.
+         * This actually replaces what's already in the client's chat input.
+         */
+        SUGGEST_CHAT,
+    }
+
+    protected final Type type;
+
+    /**
+     * Builds a ClickAction with the provided Type.
+     *
+     * @param type the type of this ClickAction
+     */
+    protected ClickAction(Type type) {
+        this.type = type;
+    }
+
+    /**
+     * Gets this ClickAction's type.
+     *
+     * @return this ClickAction's type
+     */
+    public Type getType() {
+        return type;
+    }
+
+    @Override
+    public int hashCode() {
+        return type.hashCode();
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        result.put("type", type.name());
+        return result;
+    }
+
+    /**
+     * Required method for configuration serialization.
+     *
+     * @param args map to deserialize
+     * @return deserialized ClickAction
+     * @see org.bukkit.configuration.serialization.ConfigurationSerializable
+     */
+    public static ClickAction deserialize(Map<String, Object> args) {
+        ClickAction result = null;
+        Type type = Type.valueOf((String) args.get("type"));
+        switch (type) {
+            case OPEN_URL:
+                result = OpenUrlAction.deserialize(args);
+                break;
+            case CHAT:
+                result = ChatAction.deserialize(args);
+                break;
+            case SUGGEST_CHAT:
+                result = SuggestChatAction.deserialize(args);
+        }
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/CustomMessagePart.java b/src/main/java/org/bukkit/chat/CustomMessagePart.java
new file mode 100644
index 0000000..6e421bb
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/CustomMessagePart.java
@@ -0,0 +1,128 @@
+package org.bukkit.chat;
+
+import org.bukkit.Utility;
+
+import java.util.Arrays;
+import java.util.Map;
+
+/**
+ * Represents a customizable part of a {@link RichMessage}.
+ * <p>
+ * This is what you should use if you do not need an
+ * {@link org.bukkit.inventory.ItemStack} nor an
+ * {@link org.bukkit.Achievement} as tooltip.
+ * This implementation of {@link RichMessagePart} allows you to use your own
+ * tooltip instead.
+ */
+public class CustomMessagePart extends RichMessagePart {
+
+    private String[] tooltipLines;
+
+    /**
+     * Builds a CustomMessagePart from a text and an optional tooltip.
+     * <p>
+     * Note that the text can contain {@link org.bukkit.ChatColor} codes.
+     *
+     * @param text the text of this CustomMessagePart
+     * @param tooltipLines the text lines shown when the player hover on this
+     *     CustomMessagePart
+     */
+    public CustomMessagePart(String text, String... tooltipLines) {
+        super(Type.CUSTOM, text);
+        this.tooltipLines = tooltipLines == null ? new String[0] : tooltipLines;
+    }
+
+    /**
+     * Builds a CustomMessagePart from a text, a {@link ClickAction} and an
+     * optional tooltip.
+     * <p>
+     * Note that the text can contain {@link org.bukkit.ChatColor} codes.
+     *
+     * @param text the text of this CustomMessagePart
+     * @param clickAction the action executed when the player click on this
+     *     CustomMessagePart
+     * @param tooltipLines the text lines shown when the player hover on this
+     *     CustomMessagePart
+     */
+    public CustomMessagePart(String text, ClickAction clickAction, String... tooltipLines) {
+        super(Type.CUSTOM, text, clickAction);
+        this.tooltipLines = tooltipLines == null ? new String[0] : tooltipLines;
+    }
+
+    /**
+     * Builds a CustomMessagePart from a localized text and an optional
+     * tooltip.
+     *
+     * @param localizedText the localized text of this CustomMessagePart
+     * @param tooltipLines the text lines shown when the player hover on this
+     *     CustomMessagePart
+     */
+    public CustomMessagePart(LocalizedText localizedText, String... tooltipLines) {
+        super(Type.CUSTOM, localizedText);
+        this.tooltipLines = tooltipLines == null ? new String[0] : tooltipLines;
+    }
+
+    /**
+     * Builds a CustomMessagePart from a localized text, a
+     * {@link ClickAction} and an optional tooltip.
+     *
+     * @param localizedText the localized text of this CustomMessagePart
+     * @param clickAction the action executed when the player click on this
+     *     CustomMessagePart
+     * @param tooltipLines the text lines shown when the player hover on this
+     *     CustomMessagePart
+     */
+    public CustomMessagePart(LocalizedText localizedText, ClickAction clickAction, String... tooltipLines) {
+        super(Type.CUSTOM, localizedText, clickAction);
+        this.tooltipLines = tooltipLines == null ? new String[0] : tooltipLines;
+    }
+
+    /**
+     * Gets the tooltip lines associated with this CustomMessagePart. The
+     * tooltip lines will be shown when the player hover on the text
+     * represented by this {@link CustomMessagePart}.
+     * <p>
+     * Note that the tooltip can contain {@link org.bukkit.ChatColor} codes.
+     * This method will never return null and will return an empty array
+     * instead.
+     *
+     * @return the tooltip lines associated with this CustomMessagePart
+     */
+    public String[] getTooltipLines() {
+        return tooltipLines;
+    }
+
+    /**
+     * Sets the tooltip lines associated with this CustomMessagePart. The
+     * tooltip lines will be shown when the player hover on the text
+     * represented by this {@link CustomMessagePart}.
+     * <p>
+     * Note that the tooltip can contain {@link org.bukkit.ChatColor} codes.
+     * Providing a <code>null</code> value to this method will actually set
+     * the tooltip to an empty array.
+     *
+     * @param tooltipLines the new tooltip lines associated with this
+     *     CustomMessagePart
+     */
+    public void setTooltipLines(String[] tooltipLines) {
+        this.tooltipLines = tooltipLines == null ? new String[0] : tooltipLines;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + (tooltipLines != null ? Arrays.hashCode(tooltipLines) : 0);
+        return result;
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = super.serialize();
+
+        if (tooltipLines.length > 0) {
+            result.put("tooltip", tooltipLines);
+        }
+
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/ItemMessagePart.java b/src/main/java/org/bukkit/chat/ItemMessagePart.java
new file mode 100644
index 0000000..2897d8e
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/ItemMessagePart.java
@@ -0,0 +1,140 @@
+package org.bukkit.chat;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Utility;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.Map;
+
+/**
+ * Represents a part of a {@link RichMessage} that shows an {@link ItemStack}
+ * as tooltip when the player hover the text of this {@link RichMessagePart}.
+ * <p>
+ * Note that the tooltip is fixed to the {@link ItemStack} and cannot be
+ * altered independently.
+ */
+public class ItemMessagePart extends RichMessagePart {
+
+    private ItemStack item;
+
+    /**
+     * Builds an ItemMessagePart with an {@link ItemStack} and the
+     * ItemStack's name for text.
+     *
+     * @param item the {@link ItemStack} that should be displayed
+     */
+    public ItemMessagePart(ItemStack item) {
+        this(item, (String) null);
+    }
+
+    /**
+     * Builds an ItemMessagePart with an {@link ItemStack} and the
+     * ItemStack's name for text.
+     *
+     * @param item the {@link ItemStack} that should be displayed
+     * @param clickAction the action executed when the player click on this
+     *     {@link RichMessagePart}
+     */
+    public ItemMessagePart(ItemStack item, ClickAction clickAction) {
+        this(item, (String) null, clickAction);
+    }
+
+    /**
+     * Builds an ItemMessagePart with an {@link ItemStack} and the provided
+     * text.
+     * <p>
+     * Note that the text can contain {@link org.bukkit.ChatColor} codes.
+     *
+     * @param item the {@link ItemStack} that should be displayed
+     * @param customText the text of this {@link RichMessagePart}
+     */
+    public ItemMessagePart(ItemStack item, String customText) {
+        super(Type.ITEM, customText);
+        Validate.notNull(item, "ItemMessagePart's item can't be null");
+        this.item = item;
+    }
+
+    /**
+     * Builds an ItemMessagePart with an {@link ItemStack}, the provided text
+     * and a {@link ClickAction}.
+     * <p>
+     * Note that the text can contain {@link org.bukkit.ChatColor} codes.
+     *
+     * @param item the {@link ItemStack} that should be displayed
+     * @param customText the text of this {@link RichMessagePart}
+     * @param clickAction the action executed when the player click on this
+     *     {@link RichMessagePart}
+     */
+    public ItemMessagePart(ItemStack item, String customText, ClickAction clickAction) {
+        super(Type.ITEM, customText, clickAction);
+        Validate.notNull(item, "ItemMessagePart's item can't be null");
+        this.item = item;
+    }
+
+    /**
+     * Builds an ItemMessagePart with an {@link ItemStack} and the provided
+     * localized text.
+     *
+     * @param item the {@link ItemStack} that should be displayed
+     * @param customText the localized text of this {@link RichMessagePart}
+     */
+    public ItemMessagePart(ItemStack item, LocalizedText customText) {
+        super(Type.ITEM, customText);
+        Validate.notNull(item, "ItemMessagePart's item can't be null");
+        this.item = item;
+    }
+
+    /**
+     * Builds an ItemMessagePart with an {@link ItemStack}, the provided
+     * localized text and a {@link ClickAction}.
+     *
+     * @param item the {@link ItemStack} that should be displayed
+     * @param customText the localized text of this {@link RichMessagePart}
+     * @param clickAction the action executed when the player click on this
+     *     {@link RichMessagePart}
+     */
+    public ItemMessagePart(ItemStack item, LocalizedText customText, ClickAction clickAction) {
+        super(Type.ITEM, customText, clickAction);
+        Validate.notNull(item, "ItemMessagePart's item can't be null");
+        this.item = item;
+    }
+
+    /**
+     * Gets the item for this ItemMessagePart.
+     * <p>
+     * Note that editing the item will directly affect this RichMessagePart,
+     * but it will not affect any message already sent to the client.
+     *
+     * @return the item for this ItemStackPart
+     */
+    public ItemStack getItem() {
+        return item;
+    }
+
+    /**
+     * Sets the item for this ItemMessagePart.
+     * <p>
+     * Note that editing the item will directly affect this RichMessagePart,
+     * but it will not affect any message already sent to the client.
+     *
+     * @param item the new item for this ItemStackPart
+     */
+    public void setItem(ItemStack item) {
+        Validate.notNull(item, "ItemMessagePart's item can't be null");
+        this.item = item;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = super.hashCode();
+        result = 31 * result + item.hashCode();
+        return result;
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = super.serialize();
+        result.put("item", item.serialize());
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/LocalizedText.java b/src/main/java/org/bukkit/chat/LocalizedText.java
new file mode 100644
index 0000000..98334f2
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/LocalizedText.java
@@ -0,0 +1,118 @@
+package org.bukkit.chat;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Utility;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+
+import java.util.Arrays;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents a localized text.
+ * <p>
+ * This may be used to send localized text to Minecraft Client through
+ * {@link RichMessage}s.
+ * <p>
+ * Note that adding new localized texts to Minecraft requires the server to
+ * send a resource package to the client containing these texts.
+ */
+public class LocalizedText implements ConfigurationSerializable {
+
+    private final String id;
+
+    private Object[] parameters;
+
+    /**
+     * Builds a LocalizedText based on the id of the localized text
+     * and optional parameters.
+     *
+     * @param id the id of the localized text
+     * @param parameters the parameters for this localized text
+     */
+    public LocalizedText(String id, Object... parameters) {
+        Validate.notNull(id, "LocalizedText's id can't be null");
+        this.id = id;
+        this.parameters = parameters;
+    }
+
+    /**
+     * Gets the id of this localized text.
+     *
+     * @return the id of this localized text
+     */
+    public String getId() {
+        return id;
+    }
+
+    /**
+     * Gets the parameters of this localized text.
+     * <p>
+     * Note that this will never return null, but an empty array instead.
+     *
+     * @return the parameters of this localized text
+     */
+    public Object[] getParameters() {
+        return parameters;
+    }
+
+    /**
+     * Sets the parameters of this localized text.
+     * <p>
+     * Note that providing a <code>null</code> value will set the parameters
+     * array to an empty array.
+     *
+     * @param parameters the new parameters of this localized text
+     */
+    public void setParameters(Object[] parameters) {
+        this.parameters = parameters == null ? new Object[0] : parameters;
+    }
+
+    /**
+     * Modify a single parameter of this localized text.
+     * <p>
+     * Cannot be used to add or remove parameters, only to replace existing
+     * parameters.
+     *
+     * @param i the index of the parameter to change
+     * @param parameter the new value of the parameter
+     */
+    public void setParameter(int i, Object parameter) {
+        Validate.notNull(parameter, "Cannot set an existing parameter to null");
+        Validate.isTrue(i >= 0 && i < this.parameters.length, "Invalid index '" + i + "'");
+        this.parameters[i] = parameter;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = id.hashCode();
+        result = 31 * result + (parameters != null ? Arrays.hashCode(parameters) : 0);
+        return result;
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        result.put("id", id);
+        if (parameters.length > 0) {
+            result.put("parameters", Arrays.asList(parameters));
+        }
+        return result;
+    }
+
+    /**
+     * Required method for configuration serialization.
+     *
+     * @param args map to deserialize
+     * @return deserialized LocalizedText
+     * @see org.bukkit.configuration.serialization.ConfigurationSerializable
+     */
+    public static LocalizedText deserialize(Map<String, Object> args) {
+        LocalizedText result = new LocalizedText((String) args.get("id"));
+        if (args.containsKey("parameters")) {
+            result.setParameters(((List<Object>) args.get("parameters")).toArray(new Object[0]));
+        }
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/OpenUrlAction.java b/src/main/java/org/bukkit/chat/OpenUrlAction.java
new file mode 100644
index 0000000..1d47dc8
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/OpenUrlAction.java
@@ -0,0 +1,75 @@
+package org.bukkit.chat;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Utility;
+
+import java.util.Map;
+import java.util.regex.Pattern;
+
+/**
+ * The open url action will open an url using the default client's browser
+ * when clicked client side.
+ */
+public class OpenUrlAction extends ClickAction {
+
+    /**
+     * The OPEN_URL action only allows <code>http</code> and
+     * <code>https</code> links.
+     */
+    private static final Pattern HTTP_REGEX = Pattern.compile("^https?://.*", Pattern.CASE_INSENSITIVE);
+
+    private String url;
+
+    /**
+     * Builds a new OpenUrlAction, which will open an url using the default
+     * client's browser when clicked client side.
+     *
+     * @param url the url that should be opened by the client
+     */
+    public OpenUrlAction(String url) {
+        super(Type.OPEN_URL);
+        Validate.notNull(url, "OpenUrlAction's url can't be null");
+        if (!HTTP_REGEX.matcher(url).matches()) {
+            throw new IllegalArgumentException("Valid http/https URL required");
+        }
+        this.url = url;
+    }
+
+    /**
+     * Gets the url that should be opened by the client when clicked client
+     * side.
+     *
+     * @return the url that should be opened by the client
+     */
+    public String getUrl() {
+        return url;
+    }
+
+    public void setUrl(String url) {
+        Validate.notNull(url, "OpenUrlAction's url can't be null");
+        this.url = url;
+    }
+
+    @Override
+    public int hashCode() {
+        return url.hashCode();
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = super.serialize();
+        result.put("url", url);
+        return result;
+    }
+
+    /**
+     * Required method for configuration serialization.
+     *
+     * @param args map to deserialize
+     * @return deserialized OpenUrlAction
+     * @see org.bukkit.configuration.serialization.ConfigurationSerializable
+     */
+    public static OpenUrlAction deserialize(Map<String, Object> args) {
+        return new OpenUrlAction((String) args.get("url"));
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/RichMessage.java b/src/main/java/org/bukkit/chat/RichMessage.java
new file mode 100644
index 0000000..be33f19
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/RichMessage.java
@@ -0,0 +1,830 @@
+package org.bukkit.chat;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Achievement;
+import org.bukkit.Utility;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.Iterator;
+import java.util.LinkedHashMap;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * A RichMessage is a chat message able to contain the different
+ * modifiers used by vanilla which include:
+ * <p>
+ * <li>Chat formatting</li>
+ * <li>Localized text</li>
+ * <li>Chat actions (executed when the player clicks it)</li>
+ * <li>Chat tooltips (displayed when the player hovers it)</li>
+ * <p>
+ * RichMessage structure and usage is based on the builder pattern
+ * (similar to {@link StringBuilder}).
+ * <p>
+ * Chat formatting is done using {@link org.bukkit.ChatColor} as it is
+ * done in every other message:
+ * {@code String message = ChatColor.RED + "This message is red"; }
+ * The text is localized using the vanilla identifiers (and parameters
+ * if needed) with the {@link LocalizedText} class:
+ * <pre> {@code
+ * // Without parameters
+ * new LocalizedText("stream.userinfo.unmod");
+ * // or with parameters
+ * new LocalizedText("commands.scoreboard.players.reset.success", "Notch");
+ * }</pre>
+ * All the chat actions are handled by
+ * <p>
+ * <li>{@link ChatAction}</li>
+ * <li>{@link OpenUrlAction}</li>
+ * <li>{@link SuggestChatAction}</li>
+ * <p>
+ * and the chat tooltips are handled by
+ * <p>
+ * <li>{@link CustomMessagePart}</li>
+ * <li>{@link AchievementMessagePart}</li>
+ * <li>{@link ItemMessagePart}</li>
+ * <p>
+ * A message part (which can be appended to a RichMessage) is an
+ * instance of RichMessagePart containing text (localized or not),
+ * a chat tooltip and a chat action.
+ * <p>
+ * Here are two examples of the RichMessage class usage:
+ * <pre> {@code
+ * // Message showing a golden apple tooltip
+ * ItemStack is = new ItemStack(Material.GOLDEN_APPLE)
+ * new RichMessage(ChatColor.RED + "Here is a golden apple: ")
+ *     .append(new ItemMessagePart(is));
+ *
+ * // Message showing a text tooltip and triggering the "/me clicked" command
+ * new RichMessage()
+ *     .append(new CustomMessagePart(
+ *         "Click me",
+ *         new ChatAction("/me clicked"),
+ *         "you are hovering"
+ *     )
+ * );
+ * }</pre>
+ */
+public class RichMessage implements Iterable<RichMessagePart>, ConfigurationSerializable {
+
+    protected final List<RichMessagePart> parts = new LinkedList<RichMessagePart>();
+
+    /**
+     * Builds an empty RichMessage.
+     */
+    public RichMessage() {
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     *
+     * @param firstPart the first part of this RichMessage
+     */
+    public RichMessage(RichMessagePart firstPart) {
+        this.parts.add(firstPart);
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add a {@link CustomMessagePart} containing
+     * a text and optionally a tooltip.
+     * Note that the text can contain {@link org.bukkit.ChatColor} codes.
+     *
+     * @param text the text of the first CustomMessagePart
+     * @param tooltipLines the tooltip of the first CustomMessagePart
+     */
+    public RichMessage(String text, String... tooltipLines) {
+        this.append(new CustomMessagePart(text, tooltipLines));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add a {@link CustomMessagePart} containing
+     * a localized text and optionally a tooltip.
+     *
+     * @param text the localized text of the first CustomMessagePart
+     * @param tooltipLines the tooltip of the first CustomMessagePart
+     */
+    public RichMessage(LocalizedText text, String... tooltipLines) {
+        this.append(new CustomMessagePart(text, tooltipLines));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add a {@link CustomMessagePart} containing
+     * a text, a {@link ClickAction} and optionally a tooltip.
+     *
+     * @param text the text of the first CustomMessagePart
+     * @param clickAction the action executed when the player click on the
+     *     first CustomMessagePart
+     * @param tooltipLines the tooltip of the first CustomMessagePart
+     */
+    public RichMessage(String text, ClickAction clickAction, String... tooltipLines) {
+        this.append(new CustomMessagePart(text, clickAction, tooltipLines));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add a {@link CustomMessagePart} containing
+     * a localized text, a {@link ClickAction} and optionally a tooltip.
+     *
+     * @param text the localized text of the first CustomMessagePart
+     * @param clickAction the action executed when the player click on the
+     *     first CustomMessagePart
+     * @param tooltipLines the tooltip of the first CustomMessagePart
+     */
+    public RichMessage(LocalizedText text, ClickAction clickAction, String... tooltipLines) {
+        this.append(new CustomMessagePart(text, clickAction, tooltipLines));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an ItemStack.
+     *
+     * @param item the item of the first ItemMessagePart
+     */
+    public RichMessage(ItemStack item) {
+        this.append(new ItemMessagePart(item));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an ItemStack and a {@link ClickAction}.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param clickAction the action executed when the player click on the
+     *     first ItemMessagePart
+     */
+    public RichMessage(ItemStack item, ClickAction clickAction) {
+        this.append(new ItemMessagePart(item, clickAction));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom text.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the text to hover to display the ItemStack
+     */
+    public RichMessage(ItemStack item, String customText) {
+        this.append(new ItemMessagePart(item, customText));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom
+     * localized text.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the localized text to hover to display the ItemStack
+     */
+    public RichMessage(ItemStack item, LocalizedText customText) {
+        this.append(new ItemMessagePart(item, customText));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom text
+     * and which triggers an action when clicked client side.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the text to hover to display the ItemStack
+     * @param clickAction the action executed when the player click on the
+     *     first ItemMessagePart
+     */
+    public RichMessage(ItemStack item, String customText, ClickAction clickAction) {
+        this.append(new ItemMessagePart(item, customText, clickAction));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom
+     * localized text and which triggers an action when clicked client side.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the localized text to hover to display the ItemStack
+     * @param clickAction the action executed when the player click on the
+     *     first ItemMessagePart
+     */
+    public RichMessage(ItemStack item, LocalizedText customText, ClickAction clickAction) {
+        this.append(new ItemMessagePart(item, customText, clickAction));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovered in the chat.
+     *
+     * @param achievement the achievement to display in the chat
+     */
+    public RichMessage(Achievement achievement) {
+        this.append(new AchievementMessagePart(achievement));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovered in the chat
+     * and which triggers an action when clicked client side.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param clickAction the action executed when the player click on the
+     *     first AchievementMessagePart
+     */
+    public RichMessage(Achievement achievement, ClickAction clickAction) {
+        this.append(new AchievementMessagePart(achievement, clickAction));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom
+     * text.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the text to hover to display the achievement
+     */
+    public RichMessage(Achievement achievement, String customText) {
+        this.append(new AchievementMessagePart(achievement, customText));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom localized
+     * text.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the localized text to hover to display the achievement
+     */
+    public RichMessage(Achievement achievement, LocalizedText customText) {
+        this.append(new AchievementMessagePart(achievement, customText));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom text
+     * and which triggers an action when clicked client side.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the text to hover to display the achievement
+     * @param clickAction the action executed when the player click on the
+     *     first AchievementMessagePart
+     */
+    public RichMessage(Achievement achievement, String customText, ClickAction clickAction) {
+        this.append(new AchievementMessagePart(achievement, customText, clickAction));
+    }
+
+    /**
+     * Builds a RichMessage with one part.
+     * <p>
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom localized
+     * text and which triggers an action when clicked client side.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the localized text to hover to display the achievement
+     * @param clickAction the action executed when the player click on the
+     *     first AchievementMessagePart
+     */
+    public RichMessage(Achievement achievement, LocalizedText customText, ClickAction clickAction) {
+        this.append(new AchievementMessagePart(achievement, customText, clickAction));
+    }
+
+    /**
+     * Gets the parts of this RichMessage.
+     *
+     * @return the parts of this RichMessage
+     */
+    public List<RichMessagePart> getParts() {
+        return this.parts;
+    }
+
+    /**
+     * Append a {@link RichMessagePart} to the current RichMessage.
+     *
+     * @param part the part to append to the message
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage append(RichMessagePart part) {
+        Validate.notNull(part, "A rich message part can't be null");
+        this.parts.add(part);
+        return this;
+    }
+
+    /**
+     * Append some text to the current RichMessage which can be hovered,
+     * displaying a text tooltip.
+     *
+     * @param text the text to append to the message
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage append(String text, String... tooltipLines) {
+        return this.append(new CustomMessagePart(text, tooltipLines));
+    }
+
+    /**
+     * Append some localized text to the current RichMessage which can be
+     * hovered, displaying a text tooltip.
+     *
+     * @param text the localized text to append to the message
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage append(LocalizedText text, String... tooltipLines) {
+        return this.append(new CustomMessagePart(text, tooltipLines));
+    }
+
+    /**
+     * Append some text to the current RichMessage which can be
+     * hovered, displaying a text tooltip and which triggers an action
+     * when clicked client side.
+     *
+     * @param text the text to append to the message
+     * @param clickAction the action executed when the player click on the
+     *     CustomMessagePart
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage append(String text, ClickAction clickAction, String... tooltipLines) {
+        return this.append(new CustomMessagePart(text, clickAction, tooltipLines));
+    }
+
+    /**
+     * Append some localized text to the current RichMessage which can be
+     * hovered, displaying a text tooltip and which triggers an action
+     * when clicked client side.
+     *
+     * @param text the localized text to append to the message
+     * @param clickAction the action executed when the player click on the
+     *     CustomMessagePart
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage append(LocalizedText text, ClickAction clickAction, String... tooltipLines) {
+        return this.append(new CustomMessagePart(text, clickAction, tooltipLines));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an ItemStack.
+     *
+     * @param item the item of the first ItemMessagePart
+     */
+    public RichMessage append(ItemStack item) {
+        return this.append(new ItemMessagePart(item));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an ItemStack and a {@link ClickAction}.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param clickAction the action executed when the player click on the
+     *     first ItemMessagePart
+     */
+    public RichMessage append(ItemStack item, ClickAction clickAction) {
+        return this.append(new ItemMessagePart(item, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom text.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the text to hover to display the ItemStack
+     */
+    public RichMessage append(ItemStack item, String customText) {
+        return this.append(new ItemMessagePart(item, customText));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom
+     * localized text.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the localized text to hover to display the ItemStack
+     */
+    public RichMessage append(ItemStack item, LocalizedText customText) {
+        return this.append(new ItemMessagePart(item, customText));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom text
+     * and which triggers an action when clicked client side.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the text to hover to display the ItemStack
+     * @param clickAction the action executed when the player click on the
+     *     ItemMessagePart
+     */
+    public RichMessage append(ItemStack item, String customText, ClickAction clickAction) {
+        return this.append(new ItemMessagePart(item, customText, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom
+     * localized text and which triggers an action when clicked client side.
+     *
+     * @param item the item of the first ItemMessagePart
+     * @param customText the localized text to hover to display the ItemStack
+     * @param clickAction the action executed when the player click on the
+     *     ItemMessagePart
+     */
+    public RichMessage append(ItemStack item, LocalizedText customText, ClickAction clickAction) {
+        return this.append(new ItemMessagePart(item, customText, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovered in the chat.
+     *
+     * @param achievement the achievement to display in the chat
+     */
+    public RichMessage append(Achievement achievement) {
+        return this.append(new AchievementMessagePart(achievement));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovered in the chat
+     * and which triggers an action when clicked client side.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param clickAction the action executed when the player click on the
+     *     AchievementMessagePart
+     */
+    public RichMessage append(Achievement achievement, ClickAction clickAction) {
+        return this.append(new AchievementMessagePart(achievement, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom
+     * text.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the text to hover to display the achievement
+     */
+    public RichMessage append(Achievement achievement, String customText) {
+        return this.append(new AchievementMessagePart(achievement, customText));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom localized
+     * text.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the localized text to hover to display the achievement
+     */
+    public RichMessage append(Achievement achievement, LocalizedText customText) {
+        return this.append(new AchievementMessagePart(achievement, customText));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom text
+     * and which triggers an action when clicked client side.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the text to hover to display the achievement
+     * @param clickAction the action executed when the player click on the
+     *     AchievementMessagePart
+     */
+    public RichMessage append(Achievement achievement, String customText, ClickAction clickAction) {
+        return this.append(new AchievementMessagePart(achievement, customText, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to add an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom localized
+     * text and which triggers an action when clicked client side.
+     *
+     * @param achievement the achievement to display in the chat
+     * @param customText the localized text to hover to display the achievement
+     * @param clickAction the action executed when the player click on the
+     *     AchievementMessagePart
+     */
+    public RichMessage append(Achievement achievement, LocalizedText customText, ClickAction clickAction) {
+        return this.append(new AchievementMessagePart(achievement, customText, clickAction));
+    }
+
+    /**
+     * Insert a {@link RichMessagePart} to the current RichMessage
+     * at the provided position.
+     *
+     * @param index the position the insert the part
+     * @param part the part to insert to the message
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, RichMessagePart part) {
+        Validate.notNull(part, "A rich message part can't be null");
+        this.parts.add(index, part);
+        return this;
+    }
+
+    /**
+     * Insert some text to the current RichMessage which can be hovered,
+     * displaying a text tooltip at the provided position.
+     *
+     * @param index the position the insert the text
+     * @param text the text to insert to the message
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, String text, String... tooltipLines) {
+        return this.insert(index, new CustomMessagePart(text, tooltipLines));
+    }
+
+    /**
+     * Insert some localized text to the current RichMessage which can be
+     * hovered, displaying a text tooltip at the provided position.
+     *
+     * @param index the position the insert the text
+     * @param text the localized text to append to the message
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, LocalizedText text, String... tooltipLines) {
+        return this.insert(index, new CustomMessagePart(text, tooltipLines));
+    }
+
+    /**
+     * Insert some text to the current RichMessage which can be
+     * hovered, displaying a text tooltip and which triggers an action
+     * when clicked client side at the provided position.
+     *
+     * @param index the position the insert the text
+     * @param text the text to insert to the message
+     * @param clickAction the action executed when the player click on the
+     *     CustomMessagePart
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, String text, ClickAction clickAction, String... tooltipLines) {
+        return this.insert(index, new CustomMessagePart(text, clickAction, tooltipLines));
+    }
+
+    /**
+     * Insert some localized text to the current RichMessage which can be
+     * hovered, displaying a text tooltip and which triggers an action
+     * when clicked client side at the provided position.
+     *
+     * @param index the position the insert the text
+     * @param text the localized text to insert to the message
+     * @param clickAction the action executed when the player click on the
+     *     CustomMessagePart
+     * @param tooltipLines the lines of the tooltip to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, LocalizedText text, ClickAction clickAction, String... tooltipLines) {
+        return this.insert(index, new CustomMessagePart(text, clickAction, tooltipLines));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link ItemMessagePart} containing
+     * an ItemStack at the provided position.
+     *
+     * @param index the position the insert the ItemMessagePart
+     * @param item the item of the first ItemMessagePart
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, ItemStack item) {
+        return this.insert(index, new ItemMessagePart(item));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link ItemMessagePart} containing
+     * an ItemStack and a {@link ClickAction} at the provided position.
+     *
+     * @param index the position the insert the ItemMessagePart
+     * @param item the item of the first ItemMessagePart
+     * @param clickAction the action executed when the player click on the
+     *     first ItemMessagePart
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, ItemStack item, ClickAction clickAction) {
+        return this.insert(index, new ItemMessagePart(item, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom text
+     * at the provided position.
+     *
+     * @param index the position the insert the ItemMessagePart
+     * @param item the item of the first ItemMessagePart
+     * @param customText the text to hover to display the ItemStack
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, ItemStack item, String customText) {
+        return this.insert(index, new ItemMessagePart(item, customText));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom
+     * localized text at the provided position.
+     *
+     * @param index the position the insert the ItemMessagePart
+     * @param item the item of the first ItemMessagePart
+     * @param customText the localized text to hover to display the ItemStack
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, ItemStack item, LocalizedText customText) {
+        return this.insert(index, new ItemMessagePart(item, customText));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom text
+     * and which triggers an action when clicked client side at the provided position.
+     *
+     * @param index the position the insert the ItemMessagePart
+     * @param item the item of the first ItemMessagePart
+     * @param customText the text to hover to display the ItemStack
+     * @param clickAction the action executed when the player click on the
+     *     ItemMessagePart
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, ItemStack item, String customText, ClickAction clickAction) {
+        return this.insert(index, new ItemMessagePart(item, customText, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link ItemMessagePart} containing
+     * an {@link org.bukkit.inventory.ItemStack} which appears when hovering a custom
+     * localized text and which triggers an action when clicked client side at the
+     * provided position.
+     *
+     * @param index the position the insert the ItemMessagePart
+     * @param item the item of the first ItemMessagePart
+     * @param customText the localized text to hover to display the ItemStack
+     * @param clickAction the action executed when the player click on the
+     *     ItemMessagePart
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, ItemStack item, LocalizedText customText, ClickAction clickAction) {
+        return this.insert(index, new ItemMessagePart(item, customText, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovered in the chat at the
+     * provided position.
+     *
+     * @param index the position the insert the AchievementMessagePart
+     * @param achievement the achievement to display in the chat
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, Achievement achievement) {
+        return this.insert(index, new AchievementMessagePart(achievement));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovered in the chat
+     * and which triggers an action when clicked client side at the provided position.
+     *
+     * @param index the position the insert the AchievementMessagePart
+     * @param achievement the achievement to display in the chat
+     * @param clickAction the action executed when the player click on the
+     *     AchievementMessagePart
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, Achievement achievement, ClickAction clickAction) {
+        return this.insert(index, new AchievementMessagePart(achievement, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom
+     * text at the provided position.
+     *
+     * @param index the position the insert the AchievementMessagePart
+     * @param achievement the achievement to display in the chat
+     * @param customText the text to hover to display the achievement
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, Achievement achievement, String customText) {
+        return this.insert(index, new AchievementMessagePart(achievement, customText));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom localized
+     * text at the provided position.
+     *
+     * @param index the position the insert the AchievementMessagePart
+     * @param achievement the achievement to display in the chat
+     * @param customText the localized text to hover to display the achievement
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, Achievement achievement, LocalizedText customText) {
+        return this.insert(index, new AchievementMessagePart(achievement, customText));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom text
+     * and which triggers an action when clicked client side at the provided position.
+     *
+     * @param index the position the insert the AchievementMessagePart
+     * @param achievement the achievement to display in the chat
+     * @param customText the text to hover to display the achievement
+     * @param clickAction the action executed when the player click on the
+     *     AchievementMessagePart
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, Achievement achievement, String customText, ClickAction clickAction) {
+        return this.insert(index, new AchievementMessagePart(achievement, customText, clickAction));
+    }
+
+    /**
+     * This method is a shortcut to insert an {@link AchievementMessagePart} containing
+     * an {@link org.bukkit.Achievement} which appears when hovering a custom localized
+     * text and which triggers an action when clicked client side at the provided position.
+     *
+     * @param index the position the insert the AchievementMessagePart
+     * @param achievement the achievement to display in the chat
+     * @param customText the localized text to hover to display the achievement
+     * @param clickAction the action executed when the player click on the
+     *     AchievementMessagePart
+     * @return the RichMessage instance allowing call chaining
+     */
+    public RichMessage insert(int index, Achievement achievement, LocalizedText customText, ClickAction clickAction) {
+        return this.insert(index, new AchievementMessagePart(achievement, customText, clickAction));
+    }
+
+    @Override
+    public Iterator<RichMessagePart> iterator() {
+        return this.parts.iterator();
+    }
+
+    @Override
+    public int hashCode() {
+        return parts.hashCode();
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
+
+        List<Map<String, Object>> serializedParts = new LinkedList<Map<String, Object>>();
+        for (ConfigurationSerializable part : parts) {
+            serializedParts.add(part.serialize());
+        }
+        result.put("parts", serializedParts);
+
+        return result;
+    }
+
+    /**
+     * Required method for configuration serialization.
+     *
+     * @param args map to deserialize
+     * @return deserialized rich message
+     * @see ConfigurationSerializable
+     */
+    public static RichMessage deserialize(Map<String, Object> args) {
+        RichMessage result = new RichMessage();
+
+        List<Map<String, Object>> parts = (List<Map<String, Object>>) args.get("parts");
+
+        for (Map<String, Object> part : parts) {
+            result.append(RichMessagePart.deserialize(part));
+        }
+
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/RichMessagePart.java b/src/main/java/org/bukkit/chat/RichMessagePart.java
new file mode 100644
index 0000000..2a1b5e1
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/RichMessagePart.java
@@ -0,0 +1,253 @@
+package org.bukkit.chat;
+
+import org.bukkit.Achievement;
+import org.bukkit.Utility;
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.inventory.ItemStack;
+
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents a part of a RichMessage.
+ */
+public abstract class RichMessagePart implements ConfigurationSerializable {
+
+    /**
+     * Types of RichMessagePart
+     */
+    public enum Type {
+
+        /**
+         * Show an Achievement as a tooltip
+         */
+        ACHIEVEMENT,
+
+        /**
+         * Show an ItemStack as a tooltip
+         */
+        ITEM,
+
+        /**
+         * Customizable text-based RichMessagePart
+         */
+        CUSTOM,
+    }
+
+    private final Type type;
+    private String text;
+    private LocalizedText localizedText;
+    private ClickAction clickAction;
+
+    /**
+     * Builds a RichMessagePart with a simple text.
+     *
+     * @param type the type of this RichMessagePart
+     * @param text the text of this RichMessagePart
+     */
+    protected RichMessagePart(Type type, String text) {
+        this.type = type;
+        this.text = text;
+        this.localizedText = null;
+        this.clickAction = null;
+    }
+
+    /**
+     * Builds a RichMessagePart with a localized text.
+     *
+     * @param type          the type of this RichMessagePart
+     * @param localizedText the localized text of this RichMessagePart
+     */
+    protected RichMessagePart(Type type, LocalizedText localizedText) {
+        this.type = type;
+        this.text = null;
+        this.localizedText = localizedText;
+        this.clickAction = null;
+    }
+
+    /**
+     * Builds a RichMessagePart with a simple text and a click action.
+     *
+     * @param type        the type of this RichMessagePart
+     * @param text        the text of this RichMessagePart
+     * @param clickAction the clickAction of this RichMessagePart
+     */
+    protected RichMessagePart(Type type, String text, ClickAction clickAction) {
+        this.type = type;
+        this.text = text;
+        this.localizedText = null;
+        this.clickAction = clickAction;
+    }
+
+    /**
+     * Builds a RichMessagePart with a localized text and a click action.
+     *
+     * @param type          the type of this RichMessagePart
+     * @param localizedText the localized text of this RichMessagePart
+     * @param clickAction   the clickAction of this RichMessagePart
+     */
+    protected RichMessagePart(Type type, LocalizedText localizedText, ClickAction clickAction) {
+        this.type = type;
+        this.text = null;
+        this.localizedText = localizedText;
+        this.clickAction = clickAction;
+    }
+
+    /**
+     * Gets this RichMessagePart's type.
+     *
+     * @return this RichMessagePart's type
+     */
+    public Type getType() {
+        return this.type;
+    }
+
+    /**
+     * Gets this RichMessagePart's text.
+     *
+     * @return this RichMessagePart's text
+     */
+    public String getText() {
+        return text;
+    }
+
+    /**
+     * Sets this RichMessagePart's text.
+     *
+     * @param text this RichMessagePart's new text
+     */
+    public void setText(String text) {
+        this.text = text;
+    }
+
+    /**
+     * Gets this RichMessagePart's localized text.
+     * <p>
+     * Note that this will only be used if this RichMessagePart's text
+     * is null.
+     *
+     * @return this RichMessagePart's localized text
+     */
+    public LocalizedText getLocalizedText() {
+        return localizedText;
+    }
+
+    /**
+     * Sets this RichMessagePart's localized text.
+     * <p>
+     * Note that this will only be used if this RichMessagePart's text
+     * is null.
+     *
+     * @param localizedText this RichMessagePart's localized text
+     */
+    public void setLocalizedText(LocalizedText localizedText) {
+        this.localizedText = localizedText;
+    }
+
+    /**
+     * Gets this RichMessagePart's click action.
+     *
+     * @return this RichMessagePart's click action
+     */
+    public ClickAction getClickAction() {
+        return clickAction;
+    }
+
+    /**
+     * Sets this RichMessagePart's click action.
+     *
+     * @param clickAction this RichMessagePart's new click action
+     */
+    public void setClickAction(ClickAction clickAction) {
+        this.clickAction = clickAction;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = type.hashCode();
+        result = 31 * result + (text != null ? text.hashCode() : 0);
+        result = 31 * result + (localizedText != null ? localizedText.hashCode() : 0);
+        result = 31 * result + (clickAction != null ? clickAction.hashCode() : 0);
+        return result;
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
+
+        result.put("type", type.name());
+        if (clickAction != null) {
+            result.put("clickAction", clickAction.serialize());
+        }
+        if (text != null) {
+            result.put("text", text);
+        } else if (localizedText != null) {
+            result.put("localizedText", localizedText.serialize());
+        }
+
+        return result;
+    }
+
+    /**
+     * Required method for configuration serialization
+     *
+     * @param args map to deserialize
+     * @return deserialized rich message
+     * @see ConfigurationSerializable
+     */
+    public static RichMessagePart deserialize(Map<String, Object> args) {
+        RichMessagePart result = null;
+        Type type = Type.valueOf((String) args.get("type"));
+
+        ClickAction clickAction = null;
+        if (args.containsKey("clickAction")) {
+            clickAction = ClickAction.deserialize((Map<String, Object>) args.get("clickAction"));
+        }
+
+        String text = null;
+        LocalizedText localizedText = null;
+        if (args.containsKey("text")) {
+            text = (String) args.get("text");
+        } else if (args.containsKey("localizedText")) {
+            localizedText = LocalizedText.deserialize((Map<String, Object>) args.get("localizedText"));
+        }
+
+        switch (type) {
+            case ACHIEVEMENT:
+                Achievement achievement = Achievement.valueOf((String) args.get("achievement"));
+                if (text != null) {
+                    result = new AchievementMessagePart(achievement, text, clickAction);
+                } else if (localizedText != null) {
+                    result = new AchievementMessagePart(achievement, localizedText, clickAction);
+                } else {
+                    result = new AchievementMessagePart(achievement, clickAction);
+                }
+                break;
+            case ITEM:
+                ItemStack item = ItemStack.deserialize((Map<String, Object>) args.get("item"));
+                if (text != null) {
+                    result = new ItemMessagePart(item, text, clickAction);
+                } else if (localizedText != null) {
+                    result = new ItemMessagePart(item, localizedText, clickAction);
+                } else {
+                    result = new ItemMessagePart(item, clickAction);
+                }
+                break;
+            case CUSTOM:
+                String[] tooltipLines = new String[0];
+                if (args.containsKey("tooltip")) {
+                    tooltipLines = ((List<String>) args.get("tooltip")).toArray(tooltipLines);
+                }
+                if (text != null) {
+                    result = new CustomMessagePart(text, clickAction, tooltipLines);
+                } else if (localizedText != null) {
+                    result = new CustomMessagePart(localizedText, clickAction, tooltipLines);
+                } else {
+                    throw new IllegalArgumentException("Missing text/localizedText for CustomMessagePart");
+                }
+        }
+
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/chat/SuggestChatAction.java b/src/main/java/org/bukkit/chat/SuggestChatAction.java
new file mode 100644
index 0000000..1f84110
--- /dev/null
+++ b/src/main/java/org/bukkit/chat/SuggestChatAction.java
@@ -0,0 +1,73 @@
+package org.bukkit.chat;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Utility;
+
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+
+/**
+ * The suggest chat action will open the player chat and fill it,
+ * when clicked client side
+ */
+public class SuggestChatAction extends ClickAction {
+
+    private String text;
+
+    /**
+     * Builds a new SuggestChatAction, which will open the player chat and fill it,
+     * when clicked client side
+     *
+     * @param text the text to fill the player's chat with
+     */
+    public SuggestChatAction(String text) {
+        super(Type.SUGGEST_CHAT);
+        Validate.notNull(text, "SuggestChatAction's text can't be null");
+        this.text = text;
+    }
+
+    /**
+     * Gets the text that should fill the client chat when clicked client
+     * side.
+     *
+     * @return the text that should fill the player's chat
+     */
+    public String getText() {
+        return text;
+    }
+
+    /**
+     * Sets the text that should fill the client chat when clicked client
+     * side
+     *
+     * @param text the text that should fill the player's chat
+     */
+    public void setText(String text) {
+        Validate.notNull(text, "SuggestChatAction's text can't be null");
+        this.text = text;
+    }
+
+    @Override
+    public int hashCode() {
+        return text.hashCode();
+    }
+
+    @Utility
+    public Map<String, Object> serialize() {
+        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        result.put("text", text);
+        return result;
+    }
+
+    /**
+     * Required method for configuration serialization
+     *
+     * @param args map to deserialize
+     * @return deserialized SuggestChatAction
+     * @see org.bukkit.configuration.serialization.ConfigurationSerializable
+     */
+    public static SuggestChatAction deserialize(Map<String, Object> args) {
+        return new SuggestChatAction((String) args.get("text"));
+    }
+}
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index 96a806f..fcf8786 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -12,6 +12,16 @@ import java.util.logging.Logger;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
+import org.bukkit.chat.AchievementMessagePart;
+import org.bukkit.chat.ChatAction;
+import org.bukkit.chat.ClickAction;
+import org.bukkit.chat.CustomMessagePart;
+import org.bukkit.chat.ItemMessagePart;
+import org.bukkit.chat.LocalizedText;
+import org.bukkit.chat.OpenUrlAction;
+import org.bukkit.chat.RichMessage;
+import org.bukkit.chat.RichMessagePart;
+import org.bukkit.chat.SuggestChatAction;
 import org.bukkit.configuration.Configuration;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
@@ -33,6 +43,16 @@ public class ConfigurationSerialization {
         registerClass(Color.class);
         registerClass(PotionEffect.class);
         registerClass(FireworkEffect.class);
+        registerClass(AchievementMessagePart.class);
+        registerClass(ChatAction.class);
+        registerClass(ClickAction.class);
+        registerClass(CustomMessagePart.class);
+        registerClass(ItemMessagePart.class);
+        registerClass(LocalizedText.class);
+        registerClass(OpenUrlAction.class);
+        registerClass(RichMessage.class);
+        registerClass(RichMessagePart.class);
+        registerClass(SuggestChatAction.class);
     }
 
     protected ConfigurationSerialization(Class<? extends ConfigurationSerializable> clazz) {
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index c4cd0d7..21e09d3 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -14,6 +14,7 @@ import org.bukkit.OfflinePlayer;
 import org.bukkit.Sound;
 import org.bukkit.Statistic;
 import org.bukkit.WeatherType;
+import org.bukkit.chat.RichMessage;
 import org.bukkit.command.CommandSender;
 import org.bukkit.conversations.Conversable;
 import org.bukkit.map.MapView;
@@ -195,6 +196,13 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
     public boolean performCommand(String command);
 
     /**
+     * Sends a Rich message to this Player.
+     * 
+     * @param message the Rich message
+     */
+    public void sendMessage(RichMessage message);
+
+    /**
      * Returns if the player is in sneak mode
      *
      * @return true if player is in sneak mode
-- 
1.8.5.1

